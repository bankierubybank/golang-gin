# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  - main
  
stages:
- stage: CI
  pool:
    vmImage: ubuntu-latest # Name of the VM image you want to use; valid only in the Microsoft-hosted pool.
  jobs:
  - job: CPSpectral
    steps:
    - script: curl -L 'https://spectral-us.checkpoint.com/latest/x/sh?dsn=$(SPECTRAL_DSN)' | sh
      displayName: 'Install Spectral'
    - script: $HOME/.spectral/spectral scan --ok --dsn $(SPECTRAL_DSN)  --include-tags base,audit3,iac
      displayName: 'Spectral Scan'
  - job: AquaScan
    container:
      image: aquasec/aqua-scanner
      env:
        AQUA_KEY: $(AQUA_KEY)
        AQUA_SECRET: $(AQUA_SECRET)
        TRIVY_RUN_AS_PLUGIN: aqua
    steps:
    - script: |
        trivy fs --security-checks config,vuln,secret --sast .
  - job: BuildAndPush
    steps:
    - task: Docker@2
      inputs:
        containerRegistry: 'nsthdso.azurecr.io'
        repository: 'golang-gin'
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
- stage: CD
  pool:
    vmImage: ubuntu-latest # Name of the VM image you want to use; valid only in the Microsoft-hosted pool.
  jobs:
  - job: Deploy
    steps:
    # Use deployment (YAML) files to deploy a deployment of built Docker image to AKS
    # Ref: https://learn.microsoft.com/en-us/azure/aks/devops-pipeline?view=azure-devops&pivots=pipelines-yaml
    - task: KubernetesManifest@0
      inputs:
        action: 'deploy'
        kubernetesServiceConnection: 'dev-aks_nsthdso'
        namespace: 'nsthdso'
        manifests: |
          deployment/aks/deployment.yml
          deployment/aks/service.yml
        containers: 'nsthdso.azurecr.io/golang-gin:$(Build.BuildId)'
        imagePullSecrets: 'nsthdso.azurecr.io'